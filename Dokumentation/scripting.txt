Vorraussetzungen
	SheBang-Zeile
		Die erste Zeile enthält den Pfad zum interpretierenden Programm
		#!/bin/bash

	Berechtigungen:
		Damit eine Datei als Programm ausgeführt werden kann, muss das Execute_Bit gesetzt werden d.h in den berechtigungen wird ein x angezeigt.
		chmod u+x test.sh

	Aufruf:
		Es ist eine absolute Pfadangabe notwendig:
		./test.sh
			Aufruf aus dem aktuellen Ordner

	Kontext Variablen
		Definition:
		trinken='Whiskey und Zigarre'
		Mehr als ein Wort muss in Anführungszeichen Zwischen  Zuweisung und Variablenname keine Leerzeichen

		Ausgabe:
		echo $trinken
		Definierte Variablen enthalten zu beginn ein $ - Zeichen. Das $ - Zeichen bedeutet für den Interpreter generell eine Variable

	Variablen - intern
		$0 : Der Name der aufgerufenen Datei
		$1 : Der Name des ersten Parameters
		$# : Anzahl der script- Komandos
		$? : Exit-Status des letzten Befehls; wurde der letzte Befehl 

	Kommandosubstitution
		echo`date`
		echo $(date)
		Der Shell-Befehl date wird ausgeführt und anschließend an das Programm echo übergeben

	Kommandos in Variablen
	remove='rm test.txt'
	$remove

	String-Konkatenierung
		string_1='heia und '
		string_2=Popeia
		string="$(string_1) $(string_2) was raschelt im Stroh?"
		echo "$string_1 $string_2 aber im Heu"
		echo $string	

		#!/bin/bash

trinken='Whisky und Zigarre'
echo $0
echo $1

echo `date`

echo $(date)

remove='rm text.txt'
$remove

string_1='Heia'
string_2=Popeia
string="$(string_1) $(string_2) was raschelt im stroh?"
echo "$string_1 $string_2 aber im Heu"
echo $string
~             


IF Anweisung

read -p "Ihre Eingabe:" var_name

echo "Die Eingabe lautet: $var_name"

if [[ $var_name = "q" ]]
then
        echo "ist ein prima q"
elif [[ $var_name = "m" ]]
then
        echo "Jo, ein m"
else
        echo "irgendwas anderes"
fi


Schleifen:
	Die Schleife wird Ausgeführt solange bis der Wert der Variable $eingabe nicht 1 ist.
	while [[ true ]]
	do
        read -p "Mach Eingabe du:" eingabe
        echo $eingabe
	done

	Die until schleife wiederholt bis der geprüfte wert ein false ergibt
	until [[ false ]]
	do
        read -p "Mach Eingabe du:" eingabe
        echo $eingabe
	done


Operatoren
	[[ $var]]				true falls in $var etwas steht außer false oder 0
	[[ !$var]]				true falls $var ist 0, flase, oder leer
	Strings
	[[ wert1 = 'string']]	gibt true wenn wert1 gleich zeichenkette ist
	[[ wert1 != 'string']]	gibt true wenn wert1 ungleich string ist
	arithmetische werte
	[[ wert1 -eq wert2]]	gibt true wenn wert 1 gleich wert2
	[[wert1 -ne wert1]] 	gibt true wenn wert1 ungleich wert2
	[[wert1 -gt wert2]]  	gibt true wenn wert1 größer wert2
	[[wert1 -lt wert2]] 	gibt true wenn wert1 kleiner wert2

	Systemoperatoren
	[[ -e $dateiname]]		gibt true wenn datei vorhanden ist
	[[ -d $verzeichnis]]	gibt true wenn verzeichnis vorhanden ist


Aufgabe:
	Erstellen sie ein Script, das einen Parameter entgegennimmt und checkt ob es eine Datei gibt, die so heißt wie der übergebene Parameter.
	Aufruf: ./test.sh test.txt
	Erweiterung: Die Eingabeaufforderung soll so lange gezeigt werden, bis der benutzer ein q eingibt, oder einen vorhandenen Dateinamen.